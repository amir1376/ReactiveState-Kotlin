buildscript {
    ext.kotlin_version = "1.6.10"
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.0.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "pl.allegro.tech.build.axion-release" version "1.13.2"
    id "com.github.ben-manes.versions" version "0.38.0"
    id "org.jetbrains.dokka" version "1.5.30"
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

def isOnCI = System.getenv('RUNNING_ON_CI') == 'true'
def publishing = System.getenv('PUBLISHING') == 'true'

apply from: "$rootDir/gradle/common/dependency-updates.gradle"
apply from: "$rootDir/gradle/common/scm-version.gradle"
setupScmVersion(isOnCI: isOnCI)

apply from: "$rootDir/secrets.gradle"
def publicationUsername = secrets.getProperty("publication.username") ?: System.getenv("PUBLICATION_USERNAME")
def publicationPassword = secrets.getProperty("publication.password") ?: System.getenv("PUBLICATION_PASSWORD")

// Base package setup
group "com.ensody.reactivestate"
subprojects {
    group rootProject.group
    version = rootProject.version

    def isAndroidProject = ["main", "androidMain"].any { project.file("src/$it/AndroidManifest.xml").exists() }
    def isMultiplatform = ["androidMain", "jvmMain", "jvmCommonMain", "commonMain"].any { project.file("src/$it").exists() }
    def isPlatformProject = project.name.endsWith("-bom")
    def isTestProject = project.name.endsWith("-test")
    def isComposeProject = project.name.endsWith("-compose")

    if (isPlatformProject) {
        apply from: "$rootDir/dependencies.gradle"
    } else {
        if (isAndroidProject) {
            apply from: "$rootDir/gradle/common/android-library.gradle"
        }
        if (isMultiplatform) {
            apply from: "$rootDir/gradle/common/kotlin-library.gradle"
            kotlinLibrary(
                kotlinCompilerArgs: [
                    "-Xopt-in=kotlin.RequiresOptIn",
                    "-Xopt-in=com.ensody.reactivestate.ExperimentalReactiveStateApi",
                ],
            )

            kotlin {
                jvm()

                sourceSets {
                    jvmCommonMain { dependsOn(commonMain) }
                    jvmCommonTest { dependsOn(commonTest) }
                    jvmMain { dependsOn(jvmCommonMain) }
                    jvmTest { dependsOn(jvmCommonTest) }
                }

                if (isAndroidProject) {
                    android {
                        publishAllLibraryVariants()
                    }

                    sourceSets {
                        androidMain { dependsOn(jvmCommonMain) }
                        androidTest { dependsOn(jvmTest) }
                    }
                }

                js(BOTH) {
                    browser()
                    nodejs()
                }
//                wasm32()

                ios()
                tvos()
                watchosArm64()
                watchosArm32()
//                watchosX64()
                watchosX86()

                macosX64()
                linuxX64()
//                linuxArm64()
//                linuxArm32Hfp()
                mingwX64()

                sourceSets {
                    nonJvmMain { dependsOn(commonMain) }

                    jsMain { dependsOn(nonJvmMain) }
                    nativeMain { dependsOn(nonJvmMain) }

                    appleMobileMain { dependsOn(nativeMain) }
                    iosMain { dependsOn(appleMobileMain) }
                    iosArm64Main { dependsOn(iosMain) }
                    iosArm64Test { dependsOn(iosMain) }
                    iosX64Main { dependsOn(iosMain) }
                    iosX64Test { dependsOn(iosTest) }
                    tvosMain { dependsOn(appleMobileMain) }
                    watchosMain { dependsOn(appleMobileMain) }
                    watchosArm64Main { dependsOn(watchosMain) }
                    watchosArm32Main { dependsOn(watchosMain) }
                    watchosX86Main { dependsOn(watchosMain) }

                    desktopMain { dependsOn(nativeMain) }
                    linuxX64Main { dependsOn(desktopMain) }
                    macosX64Main { dependsOn(desktopMain) }
                    mingwX64Main { dependsOn(desktopMain) }
                }
            }
        }

        apply from: "$rootDir/dependencies.gradle"

        if (isAndroidProject) {
            androidLibrary(minVersion: isComposeProject ? 21 : 19)

            android {
                // Resolve build conflicts for test modules
                if (isTestProject) {
                    packagingOptions {
                        pickFirst 'META-INF/AL2.0'
                        pickFirst 'META-INF/LGPL2.1'
                    }
                }
            }
        }

        dependencies {
            base()

            if (isAndroidProject) {
                androidBase()
            }
        }

        apply from: "$rootDir/gradle/common/dokka.gradle"

        if (!publishing) {
            apply from: "$rootDir/gradle/common/coverage.gradle"
            trackCoverage(isOnCI)
        }
    }

    apply from: "$rootDir/gradle/common/publish.gradle"
    publish(
        url: "https://s01.oss.sonatype.org/service/local/",
        username: publicationUsername,
        password: publicationPassword,
        repoUrl: "https://github.com/ensody/ReactiveState-Kotlin",
        pomAction: {
            description = "Easy reactive state management for Kotlin Multiplatform. No boilerplate. Compatible with Android."
            url = "https://ensody.github.io/ReactiveState-Kotlin/"
            licenses {
                license(LICENSE.APACHE2)
            }
            developers {
                developer {
                    id = "wkornewald"
                    name = "Waldemar Kornewald"
                    organization = "Ensody GmbH"
                    organizationUrl = "https://www.ensody.com"
                }
            }
        },
        isPlatformProject: isPlatformProject,
        sign: isOnCI,
    )
}

nexusPublishing {
    repositories {
        mavenCentral {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = publicationUsername
            password = publicationPassword
        }
    }
}
